name: Enhanced CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel in-progress runs for the same workflow + PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  # Enable sccache
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
        # Future: expand matrix for multi-OS testing
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # rust: [stable, beta]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.9

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Install cargo-nextest
      uses: taiki-e/install-action@nextest

    - name: Build all targets
      run: cargo build --all-targets --all-features

    - name: Run tests with nextest
      run: |
        cargo nextest run --all-features --no-fail-fast -- --skip test_article_extraction
      env:
        NEXTEST_PROFILE: ci

    - name: Run doctests (nextest doesn't run these)
      run: cargo test --doc --all-features

    - name: Generate test summary
      if: always()
      run: |
        echo "## Test Results (${{ matrix.os }} / ${{ matrix.rust }})" >> ""$GITHUB_STEP_SUMMARY""
        echo "✅ All tests passed" >> ""$GITHUB_STEP_SUMMARY""
        echo "" >> ""$GITHUB_STEP_SUMMARY""
        echo "**Note**: Skipping article_scraper tests due to known segfault issue (RUSTSEC-2024-0436)" >> ""$GITHUB_STEP_SUMMARY""

    - name: Show sccache stats
      run: |
        echo "## Compilation Cache Stats" >> ""$GITHUB_STEP_SUMMARY""
        sccache --show-stats >> ""$GITHUB_STEP_SUMMARY""

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain (nightly for coverage)
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: llvm-tools-preview

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.9

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-

    - name: Install coverage tools
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov,nextest

    - name: Generate coverage data
      run: |
        # Run tests with coverage (excluding problematic article_scraper tests)
        cargo llvm-cov --no-report nextest --all-features -- --skip test_article_extraction
        # Run doctests with coverage
        cargo llvm-cov --no-report --doc --all-features
        # Generate combined report
        cargo llvm-cov report --lcov --output-path lcov.info

    - name: Generate coverage summary
      run: |
        echo "## Code Coverage Report" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        cargo llvm-cov report --summary-only | tee -a "$GITHUB_STEP_SUMMARY"

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: lcov.info
        retention-days: 30

    # Future: Add codecov.io or coveralls.io integration
    # - name: Upload to codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     files: lcov.info

  clippy:
    name: Clippy Lints
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.9

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-clippy-

    - name: Run clippy
      run: |
        cargo clippy --all-targets --all-features -- -D warnings 2>&1 | tee clippy-output.txt
        CLIPPY_EXIT_CODE=${PIPESTATUS[0]}

        # Generate summary
        echo "## Clippy Analysis" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        if [ $CLIPPY_EXIT_CODE -eq 0 ]; then
          echo "✅ No clippy warnings or errors" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "❌ Clippy found issues:" >> "$GITHUB_STEP_SUMMARY"
          echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
          tail -20 clippy-output.txt >> "$GITHUB_STEP_SUMMARY"
          echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
        fi

        exit $CLIPPY_EXIT_CODE

  format:
    name: Rustfmt Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check formatting
      run: |
        cargo fmt --all -- --check
        echo "## Formatting Check" >> "$GITHUB_STEP_SUMMARY"
        echo "✅ All code is properly formatted" >> "$GITHUB_STEP_SUMMARY"

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-audit

    - name: Run security audit
      run: |
        cargo audit --json > audit-results.json || true

        echo "## Security Audit" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        # Parse and display results
        if cargo audit 2>&1 | grep -q "Success"; then
          echo "✅ No known security vulnerabilities" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "⚠️ Security audit results:" >> "$GITHUB_STEP_SUMMARY"
          echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
          cargo audit >> "$GITHUB_STEP_SUMMARY" || true
          echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit
        path: audit-results.json
        retention-days: 90

  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.9

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-doc-${{ hashFiles('**/Cargo.lock') }}

    - name: Build documentation
      run: |
        cargo doc --no-deps --all-features 2>&1 | tee doc-output.txt
        DOC_EXIT_CODE=${PIPESTATUS[0]}

        echo "## Documentation Build" >> "$GITHUB_STEP_SUMMARY"

        if [ $DOC_EXIT_CODE -eq 0 ]; then
          echo "✅ Documentation built successfully" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "❌ Documentation build failed:" >> "$GITHUB_STEP_SUMMARY"
          echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
          cat doc-output.txt >> "$GITHUB_STEP_SUMMARY"
          echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
        fi

        exit $DOC_EXIT_CODE

  # Summary job that depends on all others - useful for branch protection rules
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, coverage, clippy, format, security, docs]
    if: always()

    steps:
    - name: Check all jobs
      run: |
        echo "## Overall CI Status" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        # Check if any job failed
        if [[ "${{ needs.test.result }}" != "success" ]] || \
           [[ "${{ needs.coverage.result }}" != "success" ]] || \
           [[ "${{ needs.clippy.result }}" != "success" ]] || \
           [[ "${{ needs.format.result }}" != "success" ]] || \
           [[ "${{ needs.security.result }}" != "success" ]] || \
           [[ "${{ needs.docs.result }}" != "success" ]]; then
          echo "❌ One or more CI checks failed" >> "$GITHUB_STEP_SUMMARY"
          exit 1
        fi

        echo "✅ All CI checks passed successfully!" >> "$GITHUB_STEP_SUMMARY"
